# -*- coding: utf-8 -*-
"""Sky_Test_v1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lqirHBKMn3ksQbCN3ibVsO8jJ9iCy5Tj
"""

from keras.saving import register_keras_serializable
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.models import load_model
import numpy as np
# from tensorflow.keras.preprocessing.image import load_img, img_to_array
# import matplotlib.pyplot as plt


####################
def validate_image(img_array):
    @register_keras_serializable()
    def mse(y_true, y_pred):
        return MeanSquaredError()(y_true, y_pred)

    # Make sure sign the mse as loss function before load model
    model = load_model('sky.h5', custom_objects={'mse': mse})


    # Read and Preprocess
    # image_path = 'CCU_1.jpg'
    # img = load_img(image_path, target_size=(224, 224))  # Adjust model output size
    # img_array = img_to_array(img) / 255.0  # Standarlize to [0, 1]
    # img_array = np.expand_dims(img_array, axis=0)  # add batch dimension

    # show image
    # plt.imshow(load_img(image_path))
    # plt.axis('off')  # hide axis
    # plt.show()

    # predict
    reconstructed_img = model.predict(img_array)

    # remove batch dim to calculate MSE
    reconstructed_img = np.squeeze(reconstructed_img)
    original_img = np.squeeze(img_array)

    # Calculate MSE
    mse = np.mean((reconstructed_img - original_img) ** 2)

    print(mse)
    # Setting threshold
    threshold = 0.15  # Can adjust

    # Determine
    if mse < threshold:
        print("Sky")
        return True
    else:
        print("Not Sky")
        return False
